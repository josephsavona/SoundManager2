package telmate.com.audio{	import flash.display.*;	import flash.media.*;	import flash.net.URLRequest;	import flash.events.*;	import fl.events.SliderEvent;	import flash.events.ProgressEvent;	import flash.utils.ByteArray;	import flash.utils.Endian;	import flashx.textLayout.formats.Float;	import telmate.com.stat.*;	import flash.external.ExternalInterface;	public class Player extends flash.display.MovieClip	{		private var song:SoundChannel;		var sound:Sound;		var ssc = 200;		var URL = 'http://localhost:3000/tran.mp3'; //  'http://localhost:3000/tones.mp3';//		public function Player()		{			/*var my_sound:Sound = new Sound  ;			var req:URLRequest = new URLRequest(URL);			sound = new Sound  ;			//s.addEventListener(Event.OPEN, display_sound);			sound.addEventListener(Event.COMPLETE,display_sound);			//s.addEventListener(SampleDataEvent.SAMPLE_DATA,display_sound);			sound.load(req);			song = sound.play(6000);			volume1.addEventListener(SliderEvent.CHANGE,v1_ch);			volume2.addEventListener(SliderEvent.CHANGE,v2_ch);			feedback.text +=  "Loding " + URL; */						reset_timeline_btn.addEventListener(MouseEvent.CLICK, function(e: Event) {left_channel_timeline.reset_timeline() });		}		function v1_ch(event:SliderEvent):void		{			var transform:SoundTransform = song.soundTransform;			transform.leftToLeft = event.value / 10;			song.soundTransform = transform;		}		function v2_ch(event:SliderEvent):void		{			var transform:SoundTransform = song.soundTransform;			transform.rightToRight = event.value / 10;			song.soundTransform = transform;		}		function display_sound(event:Event)		{			//feedback.text += "loading \n";			//return;			say( 'event' + event.type);						bytes_total_field.text  = sound.bytesTotal.toString();			bytes_loaded_field.text = sound.bytesLoaded.toString();			audio_length_field.text = int(sound.length).toString();			bytes_per_length_field.text = ((sound.bytesTotal * 1000.0) / (sound.length * 1.0)).toString();									var floats_left:Vector.<Number>  = new Vector.<Number>();			var floats_right:Vector.<Number>  = new Vector.<Number>();			var out_count = 0;			var start_count = -1;			var skip = 3;			var end_count = 1000000;			try			{				do				{					var bytes:ByteArray = new ByteArray;					bytes.endian = Endian.LITTLE_ENDIAN;										if (sound.extract(bytes,10000) == 0)					{						break;					}					bytes.position = 0;					var l_left = 0,l_right = 0,l_count = 0;					say('bytes: ');					try					{						while (bytes.bytesAvailable > 0)						{							for (var s = 0; s < skip; ++s){							var left = bytes.readFloat();							var right = bytes.readFloat();							}							if (Math.abs(left) < 0.0001)							{								left = 0;							}							if (Math.abs(right) < 0.0001)							{								right = 0;							}							if ((floats_left.length % 10000) == 1)							{								//say ( "(" + int(left * ssc).toString() + '/' + int(right * ssc).toString() + ")");							}							floats_left.push(left);							floats_right.push(right);						}					}					catch (e:Error)					{						// might not be a complete float					}					say( "\nSamples: " + floats_left.length.toString());					var stat_left = new Analyzer(floats_left);					/*					say( "\nMean: " + stat_left.mean());					say ("\nStd. Dev: " + stat_left.std_dev()); */					var cs = stat_left.compress(sound_band_1.pips.length);					say('samples length: ' + cs.length.toString());					for (var i = 0; i < cs.length; ++i)					{						say(i.toString() + ': ' + int(cs[i] * 1000).toString());					}					/*var buckets = stat_left.samples(8,1);															for (var i = 0; i < buckets.length; ++i)					{					var bucket = buckets[i];					feedback.text +=  "\n\nMin: " + bucket.min.toString();					feedback.text +=  "\nMax: " + bucket.max.toString();					feedback.text +=  "\nCount: " + bucket.count.toString();					feedback.text +=  "\n";					} */					var max_pips = Math.min(sound_band_1.pips.length,cs.length);					for (var i = 0; i < max_pips; ++i)					{						//say ('setting pip ' + i.toString() + ' to ' + int(100 * cs[i]).toString());						sound_band_1.pips[i].y = 200 - cs[i] * ssc;						//say (i.toString() + ' .. done');					}				} while (bytes.length > 0);			}			catch (e:Error)			{				say('error: ' + e.toString());			}		}		function say(s:String)		{			ExternalInterface.call('say', s); // say is a console.log wrapper client side			trace(s);		}	}}